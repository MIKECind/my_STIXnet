In Secret Manager, a secret is a wrapper around a collection of secret versions. The secret stores metadata such as labels and replication, but it does not contain the actual secret. This topic describes how you can list all the secrets and view a secret's metadata. You can also list secret versions and view the details of each version. Before you begin Listing secrets requires the Secret Manager Viewer role ( roles/secretmanager.viewer) on the secret, project, folder, or organization. Viewing a secret's metadata requires the Secret Manager Viewer role ( roles/secretmanager.viewer) on the secret, project, folder, or organization. List secrets These examples show how to list all the secrets that you have permission to view in the project. Console - Go to the Secret Manager page in the Google Cloud console. - This page displays the list of secrets in the project. gcloud To use Secret Manager on the command line, first Install or upgrade to version 378.0.0 or higher of the Google Cloud CLI. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. $ gcloud secrets list C# To run this code, first set up a C# development environment and install the Secret Manager C# SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. using Google.Api.Gax.ResourceNames; using Google.Cloud.SecretManager.V1; public class ListSecretsSample { public void ListSecrets(string projectId = "my-project") { // Create the client. SecretManagerServiceClient client = SecretManagerServiceClient.Create(); // Build the resource name. ProjectName projectName = new ProjectName(projectId); // Call the API. foreach (Secret secret in client.ListSecrets(projectName)) { // ... } } } Go To run this code, first set up a Go development environment and install the Secret Manager Go SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. import ( "context" "fmt" "io" secretmanager "cloud.google.com/go/secretmanager/apiv1" "cloud.google.com/go/secretmanager/apiv1/secretmanagerpb" "google.golang.org/api/iterator" ) // listSecrets lists all secrets in the given project. func listSecrets(w io.Writer, parent string) error { // parent := "projects/my-project" // Create the client. ctx := context.Background() client, err := secretmanager.NewClient(ctx) if err != nil { return fmt.Errorf("failed to create secretmanager client: %w", err) } defer client.Close() // Build the request. req := &secretmanagerpb.ListSecretsRequest{ Parent: parent, } // Call the API. it := client.ListSecrets(ctx, req) for { resp, err := it.Next() if err == iterator.Done { break } if err != nil { return fmt.Errorf("failed to list secrets: %w", err) } fmt.Fprintf(w, "Found secret %s\n", resp.Name) } return nil } Java To run this code, first set up a Java development environment and install the Secret Manager Java SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. import com.google.cloud.secretmanager.v1.ProjectName; import com.google.cloud.secretmanager.v1.SecretManagerServiceClient; import com.google.cloud.secretmanager.v1.SecretManagerServiceClient.ListSecretsPagedResponse; import java.io.IOException; public class ListSecrets { public static void listSecrets() throws IOException { // TODO(developer): Replace these variables before running the sample. String projectId = "your-project-id"; listSecrets(projectId); } // List all secrets for a project public static void listSecrets(String projectId) throws IOException { // Initialize client that will be used to send requests. This client only needs to be created // once, and can be reused for multiple requests. After completing all of your requests, call // the "close" method on the client to safely clean up any remaining background resources. try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) { // Build the parent name. ProjectName projectName = ProjectName.of(projectId); // Get all secrets. ListSecretsPagedResponse pagedResponse = client.listSecrets(projectName); // List all secrets. pagedResponse .iterateAll() .forEach( secret -> { System.out.printf("Secret %s\n", secret.getName()); }); } } } Node.js To run this code, first set up a Node.js development environment and install the Secret Manager Node.js SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. /** * TODO(developer): Uncomment these variables before running the sample. */ // const parent = 'projects/my-project'; // Imports the Secret Manager library const {SecretManagerServiceClient} = require('@google-cloud/secret-manager'); // Instantiates a client const client = new SecretManagerServiceClient(); async function listSecrets() { const [secrets] = await client.listSecrets({ parent: parent, }); secrets.forEach(secret => { const policy = secret.replication.userManaged ? secret.replication.userManaged : secret.replication.automatic; console.log(`${secret.name} (${policy})`); }); } listSecrets(); PHP To run this code, first learn about using PHP on Google Cloud and install the Secret Manager PHP SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. // Import the Secret Manager client library. use Google\Cloud\SecretManager\V1\Client\SecretManagerServiceClient; use Google\Cloud\SecretManager\V1\ListSecretsRequest; /** * @param string $projectId Your Google Cloud Project ID (e.g. 'my-project') */ function list_secrets(string $projectId): void { // Create the Secret Manager client. $client = new SecretManagerServiceClient(); // Build the resource name of the parent secret. $parent = $client->projectName($projectId); // Build the request. $request = ListSecretsRequest::build($parent); // List all secrets. foreach ($client->listSecrets($request) as $secret) { printf('Found secret %s', $secret->getName()); } } Python To run this code, first set up a Python development environment and install the Secret Manager Python SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. def list_secrets(project_id: str) -> None: """ List all secrets in the given project. """ # Import the Secret Manager client library. from google.cloud import secretmanager # Create the Secret Manager client. client = secretmanager.SecretManagerServiceClient() # Build the resource name of the parent project. parent = f"projects/{project_id}" # List all secrets. for secret in client.list_secrets(request={"parent": parent}): print(f"Found secret: {secret.name}") Ruby To run this code, first set up a Ruby development environment and install the Secret Manager Ruby SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. # project_id = "YOUR-GOOGLE-CLOUD-PROJECT" # (e.g. "my-project") # Require the Secret Manager client library. require "google/cloud/secret_manager" # Create a Secret Manager client. client = Google::Cloud::SecretManager.secret_manager_service # Build the resource name of the parent. parent = client.project_path project: project_id # Get the list of secrets. list = client.list_secrets parent: parent # Print out all secrets. list.each do |secret| puts "Got secret #{secret.name}" end API These examples use curl to demonstrate using the API. You can generate access tokens with gcloud auth print-access-token. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. $ curl "https://secretmanager.googleapis.com/v1/projects/project-id/secrets" \ --request "GET" \ --header "authorization: Bearer $(gcloud auth print-access-token)" \ --header "content-type: application/json" View secret details These examples show how to get details about a secret by viewing its metadata. Console - Go to the Secret Manager page in the Google Cloud console. - On the Secret Manager page, click on the name of a secret to describe. - The Secret detail page lists information about the secret. gcloud To use Secret Manager on the command line, first Install or upgrade to version 378.0.0 or higher of the Google Cloud CLI. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. $ gcloud secrets describe secret-id C# To run this code, first set up a C# development environment and install the Secret Manager C# SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. using Google.Cloud.SecretManager.V1; public class GetSecretSample { public Secret GetSecret(string projectId = "my-project", string secretId = "my-secret") { // Create the client. SecretManagerServiceClient client = SecretManagerServiceClient.Create(); // Build the resource name. SecretName secretName = new SecretName(projectId, secretId); // Call the API. Secret secret = client.GetSecret(secretName); return secret; } } Go To run this code, first set up a Go development environment and install the Secret Manager Go SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. import ( "context" "fmt" "io" secretmanager "cloud.google.com/go/secretmanager/apiv1" "cloud.google.com/go/secretmanager/apiv1/secretmanagerpb" ) // getSecret gets information about the given secret. This only returns metadata // about the secret container, not any secret material. func getSecret(w io.Writer, name string) error { // name := "projects/my-project/secrets/my-secret" // Create the client. ctx := context.Background() client, err := secretmanager.NewClient(ctx) if err != nil { return fmt.Errorf("failed to create secretmanager client: %w", err) } defer client.Close() // Build the request. req := &secretmanagerpb.GetSecretRequest{ Name: name, } // Call the API. result, err := client.GetSecret(ctx, req) if err != nil { return fmt.Errorf("failed to get secret: %w", err) } replication := result.Replication.Replication fmt.Fprintf(w, "Found secret %s with replication policy %s\n", result.Name, replication) return nil } Java To run this code, first set up a Java development environment and install the Secret Manager Java SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. import com.google.cloud.secretmanager.v1.Secret; import com.google.cloud.secretmanager.v1.SecretManagerServiceClient; import com.google.cloud.secretmanager.v1.SecretName; import java.io.IOException; public class GetSecret { public static void getSecret() throws IOException { // TODO(developer): Replace these variables before running the sample. String projectId = "your-project-id"; String secretId = "your-secret-id"; getSecret(projectId, secretId); } // Get an existing secret. public static void getSecret(String projectId, String secretId) throws IOException { // Initialize client that will be used to send requests. This client only needs to be created // once, and can be reused for multiple requests. After completing all of your requests, call // the "close" method on the client to safely clean up any remaining background resources. try (SecretManagerServiceClient client = SecretManagerServiceClient.create()) { // Build the name. SecretName secretName = SecretName.of(projectId, secretId); // Create the secret. Secret secret = client.getSecret(secretName); // Get the replication policy. String replication = ""; if (secret.getReplication().getAutomatic() != null) { replication = "AUTOMATIC"; } else if (secret.getReplication().getUserManaged() != null) { replication = "MANAGED"; } else { throw new IllegalStateException("Unknown replication type"); } System.out.printf("Secret %s, replication %s\n", secret.getName(), replication); } } } Node.js To run this code, first set up a Node.js development environment and install the Secret Manager Node.js SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. /** * TODO(developer): Uncomment these variables before running the sample. */ // const name = 'projects/my-project/secrets/my-secret'; // Imports the Secret Manager library const {SecretManagerServiceClient} = require('@google-cloud/secret-manager'); // Instantiates a client const client = new SecretManagerServiceClient(); async function getSecret() { const [secret] = await client.getSecret({ name: name, }); const policy = secret.replication.replication; console.info(`Found secret ${secret.name} (${policy})`); } getSecret(); PHP To run this code, first learn about using PHP on Google Cloud and install the Secret Manager PHP SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. // Import the Secret Manager client library. use Google\Cloud\SecretManager\V1\Client\SecretManagerServiceClient; use Google\Cloud\SecretManager\V1\GetSecretRequest; /** * @param string $projectId Your Google Cloud Project ID (e.g. 'my-project') * @param string $secretId Your secret ID (e.g. 'my-secret') */ function get_secret(string $projectId, string $secretId): void { // Create the Secret Manager client. $client = new SecretManagerServiceClient(); // Build the resource name of the secret. $name = $client->secretName($projectId, $secretId); // Build the request. $request = GetSecretRequest::build($name); // Get the secret. $secret = $client->getSecret($request); // Get the replication policy. $replication = strtoupper($secret->getReplication()->getReplication()); // Print data about the secret. printf('Got secret %s with replication policy %s', $secret->getName(), $replication); } Python To run this code, first set up a Python development environment and install the Secret Manager Python SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. def get_secret(project_id: str, secret_id: str) -> secretmanager.GetSecretRequest: """ Get information about the given secret. This only returns metadata about the secret container, not any secret material. """ # Import the Secret Manager client library. from google.cloud import secretmanager # Create the Secret Manager client. client = secretmanager.SecretManagerServiceClient() # Build the resource name of the secret. name = client.secret_path(project_id, secret_id) # Get the secret. response = client.get_secret(request={"name": name}) # Get the replication policy. if "automatic" in response.replication: replication = "AUTOMATIC" elif "user_managed" in response.replication: replication = "MANAGED" else: raise Exception(f"Unknown replication {response.replication}") # Print data about the secret. print(f"Got secret {response.name} with replication policy {replication}") Ruby To run this code, first set up a Ruby development environment and install the Secret Manager Ruby SDK. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. # project_id = "YOUR-GOOGLE-CLOUD-PROJECT" # (e.g. "my-project") # secret_id = "YOUR-SECRET-ID" # (e.g. "my-secret") # Require the Secret Manager client library. require "google/cloud/secret_manager" # Create a Secret Manager client. client = Google::Cloud::SecretManager.secret_manager_service # Build the resource name of the secret. name = client.secret_path project: project_id, secret: secret_id # Get the secret. secret = client.get_secret name: name # Get the replication policy. if !secret.replication.automatic.nil? replication = "automatic" elsif !secret.replication.user_managed.nil? replication = "user managed" else raise "Unknown replication #{secret.replication}" end # Print a success message. puts "Got secret #{secret.name} with replication policy #{replication}" API These examples use curl to demonstrate using the API. You can generate access tokens with gcloud auth print-access-token. On Compute Engine or GKE, you must authenticate with the cloud-platform scope. $ curl "https://secretmanager.googleapis.com/v1/projects/project-id/secrets/secret-id" \ --request "GET" \ --header "authorization: Bearer $(gcloud auth print-access-token)" \ --header "content-type: application/json" For information about granting roles to users, see Access control with IAM. What's next - Learn how to edit secrets. - Learn how to set up rotation schedules for secrets. - Learn how to set up notifications on a secret.